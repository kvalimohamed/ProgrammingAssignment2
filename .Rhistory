above10 <- function(x,n) {
use <- x > 10
x[use]
}
j <- c(2,4,5,10,11)
above10(j,3)
x>10
j>10
x[x>10]
j[j>10]
above <- function(x,n) {
use <- x > n
x[use]
}
above(j,3)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
j <- 1:20
above(j)
above(j,2)
colmeans <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means(i) <- mean(x(i))
}
means
}
x <- matrix(100, nrow=10, ncol=10)
colmeans(x)
x
x <- matrix(1:100, nrow=10, ncol=10)
x
colmeans(x)
ncol(x)
means <- numeric(10)
means
mean(x[1])
mean(x[;1])
mean(x[,1])
colmeans <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means(i) <- mean(x[,i])
}
means
}
x
colmeans(x)
colmeans <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
colmeans(x)
airquality
colmeans(airquality)
colmeans <- function(x, removeNA = TRUE) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
colmeans(airquality)
colmeans(airquality, FALSE)
colmeans(airquality, F)
colmeans(airquality, faludo)
dir()
ls()
airquality
colmeans(airquality)
add3 <- function(x,y,z) {
x+y+z
}
above <- function(x,n = 10) {
use <- x > n
x[use]
}
colmeans <- function(x, removeNA = TRUE) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
colmeans(airquality)
swirl()
library swirl()
library(swirl)
swirl()
0
exit
stop
play()
?swirl()
nxt()
skip()
skip()
skip()
swirl()
library(swirl)
swirl()
head(flags)
play()
dim(flags)
tail(flags)
flags[name,$stripes>0]
flags[name,where(stripes>0)]
flags[name,where($stripes>0)]
?subset
subset(flags, stripes > 0)
subset(flags, stripes > 0, select = country)
subset(flags, stripes > 0, select = name)
subset(flags, stripes > 12, select = name)
subset(flags, stripes = 3, select = name)
subset(flags, stripes = 10, select = name)
subset(flags, stripes = 12, select = name)
subset(flags, stripes <3, select = name)
flags$stripes
subset(flags, stripes = 3, select = name)
subset(flags, stripes == 3, select = name)
subset(flags, stripes == 5, select = name)
flags$stripes > 5
flags[flags$stripes > 5]
class(flags)
flags[names, flags$stripes > 5]
flags[[flags$stripes > 5]]
flags[c(1,2,10),]
flags[(flags$stripes > 5)==T,]
(flags$stripes > 5)==T
flags[(flags$stripes > 5),]
flags[(flags$stripes == 14),]
flags[(flags$stripes > 14),]
flags[(flags$stripes >= 14),]
flags[(flags$stripes >= 11),]
nxt()
dim(flags)
class(flags)
cls_lst <- lapply(flags,class)
cls_lst <- lapply(flags, class)
info()
cls_list <- lapply(flags, class)
cls_list
play()
as.list(flags)
nxt()
class(cls_list)
play()
dim(cls_list)
length(cls_list)
nxt()
as.character(cls_list)
play()
?sapply
nxt()
cls_vect <- sapply(flags,class)
class(cls_ect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
play()
head(flag_shapes)
range(1:10)
nxt()
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population,flags$red, mean)
tapply(flags$population,flags$red, summary)
play()
tapply(flags$animate,flags$landmass, median)
tapply(flags$population,flags$red, median)
tapply(flags$population,flags$green, median)
nxt()
tapply(flags$population,flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob=(0.3,0.7))
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=FALSEprob=c(0.3,0.7))
flips <- sample(X=c(0,1),SIZE=100,replace=FALSEprob=c(0.3,0.7))
flips <- sample(X=c(0,1),SIZE=100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm()
?rnomr
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
play()
?pois
?rpois
nxt()
rpois(10)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed,cars$dist)
plot(cars$dist,cars$speed)
plot(cars$speed,cars$dist)
plot(x=cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance",main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
summary(mtcars)
play()
head(cars)
head(mtcars)
tail(mtcars)
is.na(mtcars)
dims(mtcars)
dim(mtcars)
ncol(mtcars)
nrow(mtcars)
ls
ls()
nxt
nxt()
?boxplot
boxplot(mpg ~ cycl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
x <- matrix(rnorm(200),20,10)
apply(x,1,mean)
apply(x,3,mean)
lapply(x,mean)
lapply(x[,1:10],mean)
lapply(x[,1],mean)
apply(x,mean)
sapply(x,mean)
sapply(x[1,],mean)
sapply(x[,1],mean)
x <- matrix(1:200,20,10)
apply(x,1,mean)
apply(x,2,mean)
x
lapply(x[1,],mean)
sapply(x[1,],mean)
sapply(x[,1],mean)
sapply(x[,1:10],mean)
sapply(x,mean)
?lapply
y <-list(c((1:10),(11:20),(21:30)))
y
y <-list((1:10),(11:20),(21:30))
y
sapply(x,mean)
sapply(y,mean)
?rowSum
?rowsum
rowsum(x)
sapply(x,rowsum)
sapply(y,rowsum)
sapply(y,colsum)
rowsum(x)
rowsum(x,1)
x
?gl
f<- gl(5)
f<- gl(5,1)
f
f<- gl(5,3)
f
f<- gl(5,5)
f
x <- matrix(1;25,5,5)
x <- matrix(1:25,5,5)
x
x <- matrix(1:25)
x
x <- c(1:15)
x
x <- c(1:25)
x
f
tapply(mean,x,f)
mapply(mean,x,f)
tapply(x,f,mean)
tapply(x,f,range)
tapply(x,f,range, simplify=TRUE)
tapply(x,f,min, simplify=TRUE)
rep(1,4)
rep(2,3)
rnorm(5,1,2)
y <- rnorm(5,1,2)
y
sort(y)
mean(y)
stddev(y)
?rnorm
sd(y)
y <- rnorm(10,1,2)
y
sort(y)
mean(y)
sd(y)
y <- rnorm(100,1,2)
range(y)
mean(y)
sd(y)
y <- rnorm(1000,1,2)
mean(y)
sd(y)
range(y)
plot(y)
y <- rnorm(1000,73,2)
plot(y)
y <- rnorm(1000,73,20)
plot(y)
range(y)
setwd("~/DataScience/RProgAssn2wk3/ProgrammingAssignment2")
ls()
load("~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/.Rhistory")
load("~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/.Rhistory")
dir()
ls()
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(2,1,1)
x <- makeCacheMatrix(matrix(2,1,1))
x
class(x)
attributes(x)
attributes(3)
attributes(1:3)
y <-makeCacheMatrix()
attributes(y)
attributes(y)[1]=="set"
attributes(y)[1]
length(attributes(y)[1])
z <-matrix(1:4,2,2)
attributes(z)
a <- list(1:3,c(4,5,6))
a
attributes(a)
attributes(1:3)
attributes(matrix(1:4,2,2)
)
b <-attributes(makeCachematrix)
b <-attributes(x)
b
length(b)
y[1]
y[2]
y[1,1]
y[1
]
y[1]
y["set"]
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc <-makeCacheMatrix(matrix(4,1,1))
abc$get()
cacheSolve(abc)
cacheSolve(abc)
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(abc)
abc$set(matrix(2,1,1))
abc$getInv
abc$getInv()
cacheSolve(abc)
cacheSolve(abc)
def <-createCacheMatrix()
def <-makeCacheMatrix()
def$set(matrix(8,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
def$set(matrix(8,1,1))
cacheSolve(def)
cacheSolve(abc)
rst <-makeCacheMatrix()
rst$get()
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
rst$get()
cacheSolve(rst)
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(rst)
rst$set(matrix(1:4,2,2))
cacheSolve(rst)
cacheSolve(abc)
cacheSolve(rst)
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
xyz <-makeCacheMatrix()
cacheSolve(xyz)
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(xyz)
cacheSolve(abc)
abc$set(matrix(5,1,1))
cacheSolve(abc)
abc$set(matrix(5,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc$set(matrix(5,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc$set(matrix(5,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc$set(matrix(5,1,1))
rm(abc)
abc
abc$set(matrix(5,1,1))
abc <-makeCacheMatrix(matrix(5,1,1))
abc$get()
abc$set(matrix(5,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc$getInv()
cacheSolve(abc)
cacheSolve(abc)
abc$set(matrix(5,1,1))
cacheSolve(abc)
abc$set(matrix(6,1,1))
cacheSolve(abc)
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
abc$set(matrix(2,1,1))
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
source('~/DataScience/RProgAssn2wk3/ProgrammingAssignment2/cachematrix.R')
ls()
dir()
x <-matrix(1:4,2,2)
xinv <-solve(x)
mat <- makeCacheMatrix(matrix(1:4,2,2))
mat$get()
mat$getInv()
mat$set(x)  ##  this should produce warning that matrix has not changed
cacheSolve(mat)
identical(xinv,mat$getInv())
cacheSolve(mat)
mat2 <- makeCacheMatrix()
mat2$set(x)
cacheSolve(mat2)
identical(xinv,mat2$getInv())
x
m[2,2] <-NA
X[2,2] <- NA
x
x[2,2] <- NA
x
mat$set(x)
mat$getInv()
cacheSolve(mat)
